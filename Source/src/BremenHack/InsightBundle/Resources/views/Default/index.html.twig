<!DOCTYPE html>
<html>
<head>
	<title>Leaflet Layers Control Example</title>
	<meta charset="utf-8" />

	<meta name="viewport" content="width=device-width, initial-scale=1.0">

	<link rel="stylesheet" href="/bundles/bremenhackinsight/css/leaflet.css" />
	<link rel="stylesheet" href="http://leafletjs.com/docs/highlight/styles/github-gist.css" />

    <style>
        body {
            padding: 0;
            margin: 0;
            font: 16px/1.4 sans-serif;
        }

        select {
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            border-radius: 0;
            font-size: 1em;
            width: 100%;
            border: 1px solid #ccc;
            padding: .4em 3em .4em 0.6em;
            background-image: url(/bundles/bremenhackinsight/images/arrow.svg);
            background-repeat: no-repeat;
            background-position: calc(100% - 16px) center;
        }

		#map {
			width: 100%;
			height: calc(100vh - 80px);
		}

        .logo {
            margin-right: 1em;
            margin-bottom: -6px;
        }

        .leaflet-marker-icon {
            display: none;
        }

        .leaflet-marker-shadow {
            display: none;
        }

		.info {
			padding: 6px 8px;
			font: 14px/16px Arial, Helvetica, sans-serif;
			background: white;
			background: rgba(255,255,255,0.8);
			box-shadow: 0 0 15px rgba(0,0,0,0.2);
			border-radius: 5px;
		}
		.info h4 {
			margin: 0 0 5px;
			color: #777;
		}

		.legend {
			text-align: left;
			line-height: 18px;
			color: #555;
		}
		.legend i {
			width: 18px;
			height: 18px;
			float: left;
			margin-right: 8px;
			opacity: 0.7;
		}

        #map {
            width: 100%;
        }

        .bar {
            padding: 0.5em 1em;
            -webkit-transform: translatez(0);
            -moz-transform: translatez(0);
            -ms-transform: translatez(0);
            -o-transform: translatez(0);
            transform: translatez(0);
        }

        @media (min-width: 700px) {
            .bar {
                max-width: 1100px;
                margin: 0 auto;
                height: 60px;
                display: flex;
                align-items: flex-end;
            }
        }

        .control__item {
            padding: 0 0.5em;
            flex: 1 0 150px;
        }

        .control__label {
            display: block;
            text-transform: uppercase;
            font-size: 0.7em;
        }


	</style>
</head>
<body>
	<div id="map"></div>
    <div class="bar" id="bar">
        <a href="/"><img src="/bundles/bremenhackinsight/images/logo.svg" alt="bremen insights logo" class="logo"></a>

        <div class="control__item">
            <label class="control__label">Datensatz</label>
            <select id="datasetSelect">
                <option>Durschnittsalter 2030</option>
            </select>
        </div>
        <div class="control__item">
            <label class="control__label">Dimension</label>
            <select id="columnSelect">
                <option>Neugeborene</option>
            </select>
        </div>
        <div class="control__item">
            <label class="control__label">Filter</label>
            <select id="categorySelect">
                <option>männlich</option>
            </select>
        </div>
    </div>
	<script src="/bundles/bremenhackinsight/js/jquery-2.1.4.min.js"></script>
	<script src="/bundles/bremenhackinsight/js/leaflet.js"></script>
	<script type="text/javascript">

		var map = L.map('map').setView([53.083333, 8.8], 10);
        var selectedCategory, selectedColumn = 0, selectedDataset, currentData, legend, controls;

		L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6IjZjNmRjNzk3ZmE2MTcwOTEwMGY0MzU3YjUzOWFmNWZhIn0.Y8bhBaUMqFiPrDRW9hieoQ', {
			maxZoom: 18,
			attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, ' +
				'<a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
				'Imagery © <a href="http://mapbox.com">Mapbox</a>',
			id: 'mapbox.light'
		}).addTo(map);


		// control that shows state info on hover
		var info = L.control();

		info.onAdd = function (map) {
			this._div = L.DomUtil.create('div', 'info');
			this.update();
			return this._div;
		};

		info.update = function (props) {
			this._div.innerHTML = '<h4>Bremen Insight Test</h4>' +  (props ?
				'<b>' + props.name + '</b><br />' + extractValue(props) + ' ' + currentData.columns[selectedColumn]
				: 'Hover over a Stadtteil');
		};

		info.addTo(map);


		// get color depending on population density value
		function getColor(d) {
            var grades = getScala();
			return d > grades[7] ? '#800026' :
			       d > grades[6]  ? '#BD0026' :
			       d > grades[5]  ? '#E31A1C' :
			       d > grades[4]  ? '#FC4E2A' :
			       d > grades[3]   ? '#FD8D3C' :
			       d > grades[2]   ? '#FEB24C' :
			       d > grades[1]   ? '#FED976' :
			                  '#FFEDA0';
		}

		function style(feature) {
			return {
				weight: 1,
				opacity: 1,
				color: '#fff',
				dashArray: '',
				fillOpacity: 0.8,
				fillColor: getColor(extractValue(feature.properties))
			};
		}

		function highlightFeature(e) {
			var layer = e.target;

			layer.setStyle({
				weight: 3,
				color: '#fff',
				dashArray: '',
				fillOpacity: 1
			});

			if (!L.Browser.ie && !L.Browser.opera) {
				layer.bringToFront();
			}

			info.update(layer.feature.properties);
		}
        function extractValue(props) {
            if(!props || !props.dataPoints || !props.dataPoints[selectedCategory]) {
                return null;
            }
            return props.dataPoints[selectedCategory][selectedColumn];
        }

		var geojson;

		function resetHighlight(e) {
			geojson.resetStyle(e.target);
			info.update();
		}

		function zoomToFeature(e) {
			map.fitBounds(e.target.getBounds());
		}

		function onEachFeature(feature, layer) {
			layer.on({
				mouseover: highlightFeature,
				mouseout: resetHighlight,
				click: zoomToFeature
			});
		}

        function getScala() {
            var maxPrecision = currentData.columnMaxima[selectedColumn] > 1000 ? 1000 : 100;
            var maxima = Math.ceil(currentData.columnMaxima[selectedColumn] / maxPrecision) * maxPrecision;
            var minPrecision = currentData.columnMinima[selectedColumn] > 1000 ? 1000 : 100;
            var minima = Math.ceil(currentData.columnMinima[selectedColumn] / minPrecision) * minPrecision;
            var grades = [];
            for(var i=0; i<8; i++) {
                grades.push(minima + Math.floor((maxima-minima) / 8 * i));
            }
            return grades;
        }

        function refreshDataPoints() {
            if(geojson) {
                //geojson.removeFrom(map);
            }
            geojson = L.geoJson(currentData, {
                style: style,
                onEachFeature: onEachFeature
            }).addTo(map);

            var grades = getScala();

            if(legend) {
                legend.removeFrom(map);
            }


            legend = L.control({position: 'bottomright'});
            legend.onAdd = function (map) {

                var div = L.DomUtil.create('div', 'info legend'),
                        labels = [],
                        from, to;

                for (var i = 0; i < grades.length; i++) {
                    from = grades[i];
                    to = grades[i + 1];

                    labels.push(
                            '<i style="background:' + getColor(from + 1) + '"></i> ' +
                            from + (to ? '&ndash;' + to : '+'));
                }

                div.innerHTML = labels.join('<br>');
                return div;
            };

            legend.addTo(map);
        }

        loadDataset('17397');

        function loadDataset(id) {
            $('#bar').hide();
            selectedDataset = id;
            $.ajax({
                url: '/geojson/' + selectedDataset + '/11',
                error: function(err){
                    console.log(err);
                    alert("fail!");
                },
                beforeSend: function(){
                    console.log('started');
                },
                success: function(){
                    console.log('success');
                },
                done: function(data){
                    currentData = data;
                    selectedCategory = data.categories[0];
                    refreshDataPoints();
                    map.attributionControl.addAttribution('Data &copy; <a href="http://daten.bremen.de/">Bremen</a>');
                    $('#categorySelect option').remove();
                    $('#datasetSelect option').remove();
                    $('#columnSelect option').remove();

                    for (var i=0; i<data.categories.length; i++) {
                        var category = data.categories[i];
                        $('#categorySelect').append('<option value="' + category + '"' + (category === selectedCategory ? ' selected' : '') + '>' + category + '</option>');
                    }
                    var columnOptions = [];
                    for(var i=0; i<data.columns.length; i++) {
                        var column = data.columns[i];
                        $('#columnSelect').append('<option value="' + i + '"' + (i === selectedColumn ? ' selected' : '') + '>' + column + '</option>');
                    }
                    var datasetOptions = [];
                    for(var i=0; i<data.datasets.length; i++) {
                        var dataset = data.datasets[i];
                        $('#datasetSelect').append('<option value="' + dataset.id + '"' + (selectedDataset == dataset.id ? ' selected' : '') + '>' + dataset.label + '</option>');
                    }
                    $('#categorySelect').change(function() {
                        selectedCategory = $('#categorySelect').val();
                        refreshDataPoints();
                    });
                    $('#columnSelect').change(function() {
                        var val = $('#columnSelect').val();
                        selectedColumn = val;
                        refreshDataPoints();
                    });
                    $('#datasetSelect').change(function() {
                        var val = $('#datasetSelect').val();
                        loadDataset(val);
                    });
                    $('#bar').show();
                }
            });
        }
	</script>
</body>
</html>
