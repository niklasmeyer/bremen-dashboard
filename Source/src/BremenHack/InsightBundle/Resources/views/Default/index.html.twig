<!DOCTYPE html>
<html>
<head>
	<title>Leaflet Layers Control Example</title>
	<meta charset="utf-8" />

	<meta name="viewport" content="width=device-width, initial-scale=1.0">

	<link rel="stylesheet" href="/bundles/bremenhackinsight/css/leaflet.css" />
	<link rel="stylesheet" href="http://leafletjs.com/docs/highlight/styles/github-gist.css" />

    <style>
        body {
            padding: 0;
            margin: 0;
        }

		#map {
			width: 100%;
			height: 100vh;
		}

        .leaflet-marker-icon {
            display: none;
        }

        .leaflet-marker-shadow {
            display: none;
        }

		.info {
			padding: 6px 8px;
			font: 14px/16px Arial, Helvetica, sans-serif;
			background: white;
			background: rgba(255,255,255,0.8);
			box-shadow: 0 0 15px rgba(0,0,0,0.2);
			border-radius: 5px;
		}
		.info h4 {
			margin: 0 0 5px;
			color: #777;
		}

		.legend {
			text-align: left;
			line-height: 18px;
			color: #555;
		}
		.legend i {
			width: 18px;
			height: 18px;
			float: left;
			margin-right: 8px;
			opacity: 0.7;
		}

        #map {
            width: 100%;
        }
	</style>
</head>
<body>
	<div id="map"></div>
	<script src="/bundles/bremenhackinsight/js/jquery-2.1.4.min.js"></script>
	<script src="/bundles/bremenhackinsight/js/leaflet.js"></script>
	<script type="text/javascript">

		var map = L.map('map').setView([53.083333, 8.8], 10);
        var selectedCategory, selectedColumn = 0, currentData, legend;

		L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6IjZjNmRjNzk3ZmE2MTcwOTEwMGY0MzU3YjUzOWFmNWZhIn0.Y8bhBaUMqFiPrDRW9hieoQ', {
			maxZoom: 18,
			attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, ' +
				'<a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
				'Imagery Â© <a href="http://mapbox.com">Mapbox</a>',
			id: 'mapbox.light'
		}).addTo(map);


		// control that shows state info on hover
		var info = L.control();

		info.onAdd = function (map) {
			this._div = L.DomUtil.create('div', 'info');
			this.update();
			return this._div;
		};

		info.update = function (props) {
			this._div.innerHTML = '<h4>Bremen Insight Test</h4>' +  (props ?
				'<b>' + props.name + '</b><br />' + extractValue(props) + ' ' + currentData.columns[selectedColumn]
				: 'Hover over a Stadtteil');
		};

		info.addTo(map);


		// get color depending on population density value
		function getColor(d) {
            var grades = getScala();
			return d > grades[7] ? '#800026' :
			       d > grades[6]  ? '#BD0026' :
			       d > grades[5]  ? '#E31A1C' :
			       d > grades[4]  ? '#FC4E2A' :
			       d > grades[3]   ? '#FD8D3C' :
			       d > grades[2]   ? '#FEB24C' :
			       d > grades[1]   ? '#FED976' :
			                  '#FFEDA0';
		}

		function style(feature) {
			return {
				weight: 2,
				opacity: 1,
				color: 'white',
				dashArray: '3',
				fillOpacity: 0.7,
				fillColor: getColor(extractValue(feature.properties))
			};
		}

		function highlightFeature(e) {
			var layer = e.target;

			layer.setStyle({
				weight: 5,
				color: '#666',
				dashArray: '',
				fillOpacity: 0.7
			});

			if (!L.Browser.ie && !L.Browser.opera) {
				layer.bringToFront();
			}

			info.update(layer.feature.properties);
		}
        function extractValue(props) {
            if(!props || !props.dataPoints || !props.dataPoints[selectedCategory]) {
                return null;
            }
            return props.dataPoints[selectedCategory][selectedColumn];
        }

		var geojson;

		function resetHighlight(e) {
			geojson.resetStyle(e.target);
			info.update();
		}

		function zoomToFeature(e) {
			map.fitBounds(e.target.getBounds());
		}

		function onEachFeature(feature, layer) {
			layer.on({
				mouseover: highlightFeature,
				mouseout: resetHighlight,
				click: zoomToFeature
			});
		}

        function getScala() {
            var precision = currentData.columnMaxima[selectedColumn] > 100 ? 100 : 10;
            var maxima = Math.ceil(currentData.columnMaxima[selectedColumn] / precision) * precision;
            var grades = [];
            for(var i=0; i<8; i++) {
                grades.push(Math.floor(maxima / 8 * i));
            }
            return grades;
        }

        function refreshDataPoints() {
            if(geojson) {
                //geojson.removeFrom(map);
            }
            geojson = L.geoJson(currentData, {
                style: style,
                onEachFeature: onEachFeature
            }).addTo(map);

            var grades = getScala();

            if(legend) {
                legend.removeFrom(map);
            }


            legend = L.control({position: 'bottomright'});
            legend.onAdd = function (map) {

                var div = L.DomUtil.create('div', 'info legend'),
                        labels = [],
                        from, to;

                for (var i = 0; i < grades.length; i++) {
                    from = grades[i];
                    to = grades[i + 1];

                    labels.push(
                            '<i style="background:' + getColor(from + 1) + '"></i> ' +
                            from + (to ? '&ndash;' + to : '+'));
                }

                div.innerHTML = labels.join('<br>');
                return div;
            };

            legend.addTo(map);
        }
        
        $.ajax('/geojson/17397').done(function(data) {
            currentData = data;
            selectedCategory = data.categories[0];
            refreshDataPoints();
            map.attributionControl.addAttribution('Data &copy; <a href="http://daten.bremen.de/">Bremen</a>');
            var controls = L.control({position: 'bottomleft'});
            controls.onAdd = function (map) {
                var div = L.DomUtil.create('div', 'info legend');

                var items = [];
                for (var i=0; i<data.categories.length; i++) {
                    var category = data.categories[i];
                    items.push('<input id="radio' + category + '" type="radio" name="category" value="' + category + '" ' + (category === selectedCategory ? 'checked' : '') + '>&nbsp;<label for="radio' + category + '">' + category + '</label>');
                }

                var options = [];

                for(var i=0; i<data.columns.length; i++) {
                    var column = data.columns[i];
                    options.push('<option value="' + i + '">' + column + '</option>');
                }

                var select = L.DomUtil.create('select');
                select.innerHTML = options.join('');

                div.innerHTML = items.join('<br>') + '<br>';


                $(div).find('input').click(function(event) {
                    var target = $(event.target);
                    selectedCategory = target.val();
                    refreshDataPoints();
                });

                $(div).append(select);


                $(select).change(function(event) {
                    var val = $(select).val();
                    selectedColumn = val;
                    refreshDataPoints();
                });

                return div;
            };

            controls.addTo(map);
        });


	</script>
</body>
</html>
